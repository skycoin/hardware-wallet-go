// Code generated by mockery v1.0.0. DO NOT EDIT.

package skywallet

import mock "github.com/stretchr/testify/mock"
import usb "github.com/skycoin/hardware-wallet-go/src/skywallet/usb"
import wire "github.com/skycoin/hardware-wallet-go/src/skywallet/wire"

// MockDeviceDriver is an autogenerated mock type for the DeviceDriver type
type MockDeviceDriver struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockDeviceDriver) Close() {
	_m.Called()
}

// DeviceType provides a mock function with given fields:
func (_m *MockDeviceDriver) DeviceType() DeviceType {
	ret := _m.Called()

	var r0 DeviceType
	if rf, ok := ret.Get(0).(func() DeviceType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(DeviceType)
	}

	return r0
}

// GetDevice provides a mock function with given fields:
func (_m *MockDeviceDriver) GetDevice() (usb.Device, error) {
	ret := _m.Called()

	var r0 usb.Device
	if rf, ok := ret.Get(0).(func() usb.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usb.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceInfos provides a mock function with given fields:
func (_m *MockDeviceDriver) GetDeviceInfos() ([]usb.Info, error) {
	ret := _m.Called()

	var r0 []usb.Info
	if rf, ok := ret.Get(0).(func() []usb.Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usb.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendToDevice provides a mock function with given fields: dev, chunks
func (_m *MockDeviceDriver) SendToDevice(dev usb.Device, chunks [][64]byte) (wire.Message, error) {
	ret := _m.Called(dev, chunks)

	var r0 wire.Message
	if rf, ok := ret.Get(0).(func(usb.Device, [][64]byte) wire.Message); ok {
		r0 = rf(dev, chunks)
	} else {
		r0 = ret.Get(0).(wire.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(usb.Device, [][64]byte) error); ok {
		r1 = rf(dev, chunks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendToDeviceNoAnswer provides a mock function with given fields: dev, chunks
func (_m *MockDeviceDriver) SendToDeviceNoAnswer(dev usb.Device, chunks [][64]byte) error {
	ret := _m.Called(dev, chunks)

	var r0 error
	if rf, ok := ret.Get(0).(func(usb.Device, [][64]byte) error); ok {
		r0 = rf(dev, chunks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
